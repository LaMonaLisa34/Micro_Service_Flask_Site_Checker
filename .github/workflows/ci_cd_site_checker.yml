name: CI/CD Monitoring Flask Site Checker

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add VM to known_hosts (good port)
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_SSH_PORT: ${{ secrets.VM_SSH_PORT }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$VM_SSH_PORT" "$VM_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Rsync repository to VM
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          VM_SSH_PORT: ${{ secrets.VM_SSH_PORT }}
          VM_TARGET_DIR: ${{ secrets.VM_TARGET_DIR }}
        run: |
          # --delete pour garder la cible en miroir du repo
          rsync -az --delete \
            -e "ssh -p $VM_SSH_PORT -o StrictHostKeyChecking=yes" \
            ./ "$VM_USER@$VM_HOST:$VM_TARGET_DIR"

      - name: Deploy with Docker Compose
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          VM_SSH_PORT: ${{ secrets.VM_SSH_PORT }}
          VM_TARGET_DIR: ${{ secrets.VM_TARGET_DIR }}
        run: |
          ssh -p "$VM_SSH_PORT" "$VM_USER@$VM_HOST" << 'EOF'
          set -euo pipefail
          cd "$VM_TARGET_DIR"

          # Choisir la bonne commande compose (V2 ou V1)
          if docker compose version >/dev/null 2>&1; then
            COMPOSE_CMD="docker compose"
          elif docker-compose version >/dev/null 2>&1; then
            COMPOSE_CMD="docker-compose"
          else
            echo "Erreur: ni 'docker compose' ni 'docker-compose' n'est installÃ©." >&2
            exit 1
          fi

          $COMPOSE_CMD down || true
          $COMPOSE_CMD up -d --build
          EOF
